<!doctype html>
<html
  class="no-js{% if request.design_mode %} shopify-design-mode{% endif %}"
  lang="{{ request.locale.iso_code }}"
>
  <head>
    {%- render 'stylesheets' -%}

    {%- if settings.favicon != blank -%}
      <link
        rel="icon"
        type="image/png"
        href="{{ settings.favicon | image_url: width: 32, height: 32 }}"
      >
    {%- endif -%}

    {% comment %} This a way to wait for main content to load when navigating to a new page so that the view transitions can work consistently {% endcomment %}
    <link
      rel="expect"
      href="#MainContent"
      blocking="render"
      id="view-transition-render-blocker"
    >

    {%- render 'meta-tags' -%}
    {%- render 'fonts' -%}
    {%- render 'scripts' -%}
    {%- render 'theme-styles-variables' -%}
    {%- render 'color-schemes' -%}

    {% if request.design_mode %}
      {%- render 'theme-editor' -%}
    {% endif %}

    {{ content_for_header }}
  </head>

  <body class="page-width-{{ settings.page_width }} card-hover-effect-{{ settings.card_hover_effect }}">
    {% render 'skip-to-content-link', href: '#MainContent', text: 'accessibility.skip_to_text' %}
    <div id="header-group">
      {% sections 'header-group' %}
    </div>

    <main
      id="MainContent"
      class="content-for-layout"
      role="main"
      data-page-transition-enabled="{{ settings.page_transition_enabled }}"
      data-product-transition="{{ settings.transition_to_main_product }}"
      data-template="{{ template }}"
    >
      {{ content_for_layout }}
    </main>

    {% sections 'footer-group' %}

    {% # theme-check-disable ParserBlockingScript %}
    <script src="{{ 'critical.js' | asset_url }}"></script>
    {% # theme-check-enable ParserBlockingScript %}

    {% render 'search-modal' %}

    {% if settings.quick_add or settings.mobile_quick_add %}
      {% render 'quick-add-modal' %}
    {% endif %}

    <script>
        window.YGC_WIDGET_ID = "YOUR_WIDGET_ID";
        (function () {
          var script = document.createElement("script");
          script.src = "https://widget.yourgpt.ai/script.js";
          script.id = "yourgpt-chatbot";
          document.body.appendChild(script);

          script.onload = function () {
            console.log("Instance:", $yourgptChatbot);
            setupChatbotAIActions();
          }
        })();

        function setupChatbotAIActions() {
          if (typeof $yourgptChatbot !== 'undefined') {

            // Get location action
            $yourgptChatbot.on("ai:action:get_location", function (data, action) {
              action.respond("Mohali");
            });

            // Find product action - Fixed URL and error handling
            $yourgptChatbot.on("ai:action:find_product", async function (data, action) {
              try {
                const query = data.action.tool.function.arguments;
                const query_data = JSON.parse(query);
                
                let url = `{{ shop.url }}/search?q=${query_data.q}&options%5Bprefix%5D=last`;
                
                const response = await fetch(url);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                
                const html = await response.text();
                const parser = new DOMParser();
                const document = parser.parseFromString(html, 'text/html');
                
                // More flexible product list selector  
                const productList = document.querySelector('ul.product-grid, .product-grid, [data-products-grid]');
                const slugs = [];
                
                if (productList) {
                  const productListItems = productList.querySelectorAll('li');
                  
                  productListItems.forEach(listItem => {
                    const potentialTitleElements = listItem.querySelectorAll('h1, h2, h3, h4, h5, h6, p, span, a');
                
                    for (const titleElement of potentialTitleElements) {
                      const titleText = titleElement.textContent.trim();
                      if (titleText.length > 0 && !titleText.toLowerCase().includes('add')) {
                        const slug = titleText.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
                        slugs.push(slug);
                        break;
                      }
                    }
                  });
                }

                if (slugs.length < 1) {
                  return action.respond("No Product Found!");
                }
                
                const result = slugs.join(' ');
                action.respond(`I found these products you were searching for: ${result}`);
                
                setTimeout(() => {
                  window.location.href = url;
                }, 1000);
                
              } catch (error) {
                console.error('Error finding products:', error);
                action.respond("Sorry, there was an error searching for products.");
              }
            });

            // Show all products
            $yourgptChatbot.on("ai:action:show_products", async function (data, action) {
              window.location.href = `{{ shop.url }}/collections/all`;
              action.respond("Here are all the products");
            });

            // View specific product - Improved error handling
            $yourgptChatbot.on("ai:action:view_product", function (data, action) {
              try {
                let all_slug = [];
                const links = document.querySelectorAll('a[href*="/products/"]');
                
                links.forEach(link => {
                  const href = link.href;
                  const slug = href.split('/products/')[1];
                  if (slug) all_slug.push(slug);
                });
                  
                const query = data.action.tool.function.arguments;
                const query_data = JSON.parse(query);
                
                const result = findMostSimilar(query_data.q, all_slug);
                
                if (!result) {
                  return action.respond("No Product Found!");
                }
                
                const url = `{{ shop.url }}/products/${result}`;
                window.location.href = url;
                action.respond("Here is the product details page");
              } catch (error) {
                console.error('Error viewing product:', error);
                action.respond("Sorry, there was an error finding that product.");
              }
            });

            // Add to cart - Enhanced with better variant handling
            $yourgptChatbot.on("ai:action:add_to_cart", async function (data, action) {
              try {
                let all_slug = [];
                const links = document.querySelectorAll('a[href*="/products/"]');
                
                links.forEach(link => {
                  const href = link.href;
                  const slug = href.split('/products/')[1];
                  if (slug) all_slug.push(slug);
                });

                const query = data.action.tool.function.arguments;
                const query_data = JSON.parse(query);

                let product_options = getOptionsAsURLParams();
                if (product_options.length > 1 && !query_data.color && !query_data.size) {
                  return action.respond(`Kindly choose which variant you want to add to your cart: ${product_options}`);
                }

                const result = findMostSimilar(query_data.q, all_slug);
                if (!result) {
                  return action.respond("No product found!");
                }
                
                let variantId = result?.split("variant=")[1];

                // Handle variant selection
                if (query_data.color && query_data.size) {   
                  async function selectOptionsSequentially(size, color) {
                    selectOption('size', size);
                    await new Promise(r => setTimeout(r, 200));
                    selectOption('color', color);
                  }
                  
                  await selectOptionsSequentially(query_data.size, query_data.color);
                  
                  let updated_url = window.location.href;
                  variantId = updated_url.split("variant=")[1]?.split("#")[0];

                  const cartResult = await addToCart(variantId);
                  if (cartResult.success) {
                    setTimeout(() => {
                      window.location.href = `{{ shop.url }}/cart`;
                    }, 1000);
                    return action.respond("Product added to cart");
                  } else {
                    return action.respond("Failed to add to cart!");
                  }
                }

                // Try direct add to cart
                const variantInput = document.querySelector(`input[name="id"][value="${variantId}"]`);
                
                if (variantInput) {
                  const form = variantInput.closest('form');
                  
                  if (form) {
                    const addButton = form.querySelector('button[name="add"]') ||
                                     form.querySelector('button.add-to-cart-button') ||
                                     form.querySelector('button[type="submit"]');
                    
                    if (addButton) {
                      addButton.click();
                      return action.respond("Product Added To Cart");
                    }
                  }
                } else {          
                  let response = await increaseQuantityViaAPI(result);
                  if (!response) {
                    return action.respond("Failed to add the Product or Product not exists!");
                  }
                  action.respond("Quantity is Increased");  
                }
              } catch (error) {
                console.error('Error adding to cart:', error);
                action.respond("Sorry, there was an error adding the product to cart.");
              }
            });

            // Open checkout - Enhanced with cart validation
            $yourgptChatbot.on("ai:action:open_checkout", async function (data, action) {
              try {
                const cartResponse = await fetch('/cart.js');
                const cart = await cartResponse.json();
                
                if (cart.items && cart.items.length > 0) {
                  action.respond("Opening checkout page...");
                  
                  setTimeout(() => {
                    window.location.href = `{{ shop.url }}/checkout`;
                  }, 1000);
                } else {
                  action.respond("Your cart is empty. Please add items before checkout.");
                }
                
              } catch (error) {
                console.error('Error checking cart:', error);
                action.respond("Opening checkout page...");
                setTimeout(() => {
                  window.location.href = `{{ shop.url }}/checkout`;
                }, 1000);
              }
            });

            // View cart
            $yourgptChatbot.on("ai:action:view_cart", function (data, action) {
              const url = `{{ shop.url }}/cart`;
              window.location.href = url;
              action.respond("Here is your cart.");
            });

            // Product with filter
            $yourgptChatbot.on("ai:action:product_with_filter", function (data, action) {
              const query = data.action.tool.function.arguments;
              const query_data = JSON.parse(query);
              
              const url = `{{ shop.url }}/collections/all?filter.v.price.gte=${query_data.min || 0}.00&filter.v.price.lte=${query_data.max || 999}.00&sort_by=title-ascending&grid=default`;
              window.location.href = url;
              action.respond("Here are your filtered products.");
            });

            // Remove from cart - Fixed implementation
            $yourgptChatbot.on("ai:action:remove_from_cart", async function (data, action) {
              try {
                const query = data.action.tool.function.arguments;
                const query_data = JSON.parse(query);
                
                // Get current cart
                const cartResponse = await fetch('/cart.js');
                const cart = await cartResponse.json();
                
                if (!cart.items || cart.items.length === 0) {
                  return action.respond("Your cart is empty.");
                }
                
                // Find item to remove
                const itemToRemove = cart.items.find(item => 
                  item.product_title.toLowerCase().includes(query_data.q.toLowerCase()) ||
                  item.product_handle.includes(query_data.q.toLowerCase())
                );
                
                if (!itemToRemove) {
                  return action.respond("Product not found in cart.");
                }
                
                // Remove item using Cart API
                const removeResponse = await fetch('/cart/change.js', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                  },
                  body: JSON.stringify({
                    id: itemToRemove.variant_id,
                    quantity: 0
                  })
                });
                
                if (removeResponse.ok) {
                  action.respond("Product removed from cart successfully.");
                  setTimeout(() => {
                    window.location.reload();
                  }, 1000);
                } else {
                  action.respond("Failed to remove product from cart.");
                }
                
              } catch (error) {
                console.error('Error removing from cart:', error);
                action.respond("Sorry, there was an error removing the product.");
              }
            });

          } else {
            console.warn('Chatbot not available, retrying setup...');
            setTimeout(setupChatbotAIActions, 1000);
          }
        }

        // Utility Functions

        function findMostSimilar(query, items) {
          if (!query || !items || items.length === 0) return null;
          
          const normalizedQuery = query.toLowerCase().replace(/-/g, ' ').trim();
          
          const queryWords = normalizedQuery
              .split(' ')
              .map(word => word.trim())
              .filter(word => 
                  word.length > 0 && 
                  !['open', 'show', 'find', 'get', 'view', 'the', 'a', 'an'].includes(word)
              );
          
          if (queryWords.length === 0) return null;
          
          let bestMatch = null;
          let bestScore = 0;
          
          for (let item of items) {
              if (!item || typeof item !== 'string') continue;
              
              const productName = item.split('?')[0].replace(/-/g, ' ').toLowerCase().trim();
              
              let score = 0;
              
              const queryPhrase = queryWords.join(' ');
              if (productName.includes(queryPhrase)) {
                  score = 100;
              } else {
                  for (let i = 0; i < queryWords.length - 1; i++) {
                      const partialPhrase = queryWords.slice(i, i + 2).join(' ');
                      if (productName.includes(partialPhrase)) {
                          score += 50;
                      }
                  }
                  
                  let matchingWords = 0;
                  queryWords.forEach(word => {
                      if (productName.includes(word)) {
                          matchingWords++;
                          score += 10;
                      }
                  });
                  
                  if (matchingWords === queryWords.length) {
                      score += 20;
                  }
              }
              
              if (score > 0 && score > bestScore) {
                  bestScore = score;
                  bestMatch = item;
              }
          }
          
          return bestMatch;
        }

        async function increaseQuantityViaAPI(productSlug) {
          try {
            const cartResponse = await fetch('/cart.js');
            const cart = await cartResponse.json();
            
            const cartItem = cart.items.find(item => 
              item.url.includes(productSlug) || 
              item.product_handle === productSlug.split('?')[0]
            );
            
            if (!cartItem) {
              console.error('Product not found in cart');
              return false;
            }
            
            const updateData = {
              updates: {
                [cartItem.variant_id]: cartItem.quantity + 1
              }
            };
            
            const updateResponse = await fetch('/cart/update.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify(updateData)
            });
            
            if (updateResponse.ok) {
              window.location.reload();
              return true;
            } else {
              return false;
            }
            
          } catch (error) {
            console.error('Error updating cart via API:', error);
            return false;
          }
        }

        function getSimpleOptions() {
            const options = {};
            const fieldsets = document.querySelectorAll('fieldset.variant-option');
            
            fieldsets.forEach(fieldset => {
                const legend = fieldset.querySelector('legend');
                const optionName = legend ? legend.textContent.trim() : 'Unknown';
                
                const radioInputs = fieldset.querySelectorAll('input[type="radio"]');
                const optionValues = Array.from(radioInputs).map(input => input.value);
                
                options[optionName] = optionValues;
            });
            
            return options;
        }

        function getOptionsAsURLParams() {
            const options = getSimpleOptions();
            let params = [];
            
            for (const [optionName, optionValues] of Object.entries(options)) {
                params.push(`${optionName.toLowerCase()}=${optionValues.join('|')}`);
            }
            
            return params.join('&');
        }

        function selectOption(optionCategory, optionValue) {
          const fieldset = document.querySelector(`fieldset[data-option-id*="${optionCategory.toLowerCase()}"]`);
          if (!fieldset) {
            console.warn(`No fieldset found for option category: ${optionCategory}`);
            return;
          }

          const input = Array.from(fieldset.querySelectorAll('input[type="radio"]'))
            .find(i => i.value.toLowerCase() === optionValue.toLowerCase());

          if (!input) {
            console.warn(`No option input found with value: ${optionValue} in ${optionCategory}`);
            return;
          }

          input.click();

          setTimeout(() => {
            input.dispatchEvent(new Event('change', { bubbles: true }));
          }, 50);
        }
            
        async function addToCart(variantId, quantity = 1) {
            try {
                const response = await fetch('/cart/add.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        id: variantId,
                        quantity: quantity
                    })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    return { success: true, data: result };
                } else {
                    const error = await response.json();
                    return { success: false, error: error };
                }
            } catch (error) {
                return { success: false, error: error.message };
            }
        }
    </script>
  </body>
</html>
